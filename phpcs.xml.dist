<?xml version="1.0"?>
<ruleset name="waggypuppy Coding Standards">
    <!--
    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-Ruleset
    https://kalimah-apps.com/phpcs/docs/rules/Generic.html
    -->
    <description>Apply waggypuppy Coding Standards to all Core files</description>

    <arg name="extensions" value="php"/>
    <arg name="cache" value=".cache/phpcs.json"/>

    <ini name="memory_limit" value="512M"/>
    <arg name="basepath" value="./"/>
    <arg name="parallel" value="20"/>
    <arg value="ps"/>
    <arg name="tab-width" value="4"/>

    <file>.</file>

    <exclude-pattern type="relative">^build/*</exclude-pattern>

    <exclude-pattern>/node_modules/*</exclude-pattern>
    <exclude-pattern>/vendor/*</exclude-pattern>

    <exclude-pattern>/src/wp-admin/includes/class-ftp*</exclude-pattern>
    <exclude-pattern>/src/wp-admin/includes/class-pclzip\.php</exclude-pattern>
    <exclude-pattern>/src/wp-admin/includes/deprecated\.php</exclude-pattern>
    <exclude-pattern>/src/wp-admin/includes/ms-deprecated\.php</exclude-pattern>

    <exclude-pattern>/src/wp-includes/atomlib\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-avif-info\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-IXR\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-json\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-phpass\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-pop3\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-requests\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-simplepie\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/class-snoopy\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/deprecated\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/ms-deprecated\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/pluggable-deprecated\.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/rss\.php</exclude-pattern>

    <exclude-pattern>/src/wp-includes/assets/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/blocks/*/*.asset.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/blocks/blocks-json.php</exclude-pattern>
    <exclude-pattern>/src/wp-includes/ID3/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/IXR/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/js/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/PHPMailer/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/Requests/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/SimplePie/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/sodium_compat/*</exclude-pattern>
    <exclude-pattern>/src/wp-includes/Text/*</exclude-pattern>

    <!-- Test data and fixtures. -->
    <exclude-pattern>/tests/phpunit/build*</exclude-pattern>
    <exclude-pattern>/tests/phpunit/data/*</exclude-pattern>

    <exclude-pattern>/tools/*</exclude-pattern>

    <!-- Drop-in plugins. -->
    <exclude-pattern>/src/wp-content/advanced-cache\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/blog-deleted\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/blog-inactive\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/blog-suspended\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/db-error\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/db\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/fatal-error-handler\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/install\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/maintenance\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/object-cache\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/php-error\.php</exclude-pattern>
    <exclude-pattern>/src/wp-content/sunrise\.php</exclude-pattern>

    <exclude-pattern>/src/wp-content/mu-plugins/*</exclude-pattern>
    <exclude-pattern>/src/wp-content/plugins/*</exclude-pattern>
    <exclude-pattern>/src/wp-content/themes/(?!twenty)*</exclude-pattern>
    <exclude-pattern>/src/wp-content/languages/*</exclude-pattern>

    <!-- ================================================================ -->

    <rule ref="PHPCSUtils"/> <!-- sanity check, gives a nice error message if the core ruleset is missing -->

    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
    <rule ref="PSR2.Files.ClosingTag"/>
    <rule ref="Squiz.PHP.EmbeddedPhp"/>
    <rule ref="Squiz.PHP.EmbeddedPhp.Indent"><severity>0</severity></rule>
    <rule ref="Squiz.PHP.EmbeddedPhp.OpenTagIndent"><severity>0</severity></rule>
    <rule ref="Squiz.PHP.EmbeddedPhp.ShortOpenEchoNoSemicolon"><severity>0</severity></rule>
    <rule ref="Squiz.PHP.EmbeddedPhp.SpacingAfter"><severity>0</severity></rule>
    <rule ref="Squiz.PHP.EmbeddedPhp.SpacingBefore"><severity>0</severity></rule>

    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>
    <rule ref="PEAR.Files.IncludingFile.BracketsNotRequired"/>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="PEAR.Files.IncludingFile.UseRequire"><type>warning</type></rule>
    <rule ref="PEAR.Files.IncludingFile.UseRequireOnce"><type>warning</type></rule>
    <rule ref="WordPress.NamingConventions.ValidFunctionName"/>
    <rule ref="WordPress.NamingConventions.ValidHookName"/>
    <rule ref="WordPress.NamingConventions.ValidVariableName"/>
    <rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames"/>
    <rule ref="PEAR.NamingConventions.ValidClassName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="WordPress.Files.FileName"/>
    <rule ref="Universal.WhiteSpace.CommaSpacing"/>
    <rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterCommaBeforeTrailingComment"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInFunctionDeclaration"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInFunctionDeclaration"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInFunctionDeclaration"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInClosureUse"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInClosureUse"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInClosureUse"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInFunctionCall"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInFunctionCall"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInFunctionCall"><severity>0</severity></rule>

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="PSR2.ControlStructures.ControlStructureSpacing" />

    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterVariadic">
        <severity>0</severity>
    </rule>

    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="WordPress.PHP.TypeCasts"/>
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>
    <rule ref="Generic.PHP.LowerCaseType"/>

    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="exact" value="false"/>
            <property name="indent" value="4"/>
            <property name="tabIndent" value="false"/>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_HEREDOC"/>
                <element value="T_NOWDOC"/>
                <element value="T_INLINE_HTML"/>
            </property>
        </properties>
    </rule>

    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Universal.WhiteSpace.PrecisionAlignment"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <rule ref="NormalizedArrays.Arrays.CommaAfterLast"/>

    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration.NotLower"><severity>0</severity></rule>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration.BreakNotNewLine"><severity>0</severity></rule>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration.BodyOnNextLine"><severity>0</severity></rule>
    <rule ref="Universal.WhiteSpace.DisallowInlineTabs"/>

    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="40"/>
        </properties>
    </rule>

    <rule ref="WordPress.Arrays.MultipleStatementAlignment">
        <properties>
            <property name="maxColumn" value="60"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="PSR12.Functions.NullableTypeDeclaration"/>
    <rule ref="PSR12.Functions.ReturnTypeDeclaration"/>
    <rule ref="Universal.Operators.TypeSeparatorSpacing"/>
    <rule ref="Universal.Constants.UppercaseMagicConstants"/>
    <rule ref="Universal.Constants.LowercaseClassResolutionKeyword"/>
    <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter"/>
    <rule ref="Universal.Namespaces.OneDeclarationPerFile"/>
    <rule ref="Universal.Namespaces.DisallowCurlyBraceSyntax"/>
    <rule ref="Universal.Namespaces.DisallowDeclarationWithoutName"/>
    <rule ref="PSR12.Files.FileHeader.IncorrectOrder"/>
    <rule ref="PSR12.Files.FileHeader.IncorrectGrouping"/>
    <rule ref="Universal.UseStatements.NoUselessAliases"/>
    <rule ref="Universal.UseStatements.KeywordSpacing"/>
    <rule ref="Universal.UseStatements.KeywordSpacing.SpaceAfterUse"><severity>0</severity></rule>
    <rule ref="Universal.UseStatements.NoLeadingBackslash"/>
    <rule ref="Universal.UseStatements.LowercaseFunctionConst"/>
    <rule ref="Universal.UseStatements.DisallowMixedGroupUse"/>
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>
    <rule ref="PSR12.Traits.UseDeclaration"/>
    <rule ref="PSR12.Traits.UseDeclaration.UseAfterBrace"><severity>0</severity></rule>
    <rule ref="PSR12.Traits.UseDeclaration.SpaceAfterUse"><severity>0</severity></rule>
    <rule ref="PSR12.Traits.UseDeclaration.SpaceBeforeComma"><severity>0</severity></rule>
    <rule ref="PSR12.Traits.UseDeclaration.SpaceAfterComma"><severity>0</severity></rule>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore"><severity>0</severity></rule>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Universal.Classes.ModifierKeywordOrder"/>
    <rule ref="Universal.Constants.ModifierKeywordOrder"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore"><severity>0</severity></rule>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="PSR12.Classes.ClassInstantiation"/>
    <rule ref="Universal.Classes.RequireAnonClassParentheses"/>

    <rule ref="Universal.WhiteSpace.AnonClassKeywordSpacing">
        <properties>
            <property name="spacing" value="0"/>
        </properties>
    </rule>

    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="WordPress.PHP.YodaConditions"/>
    <rule ref="Universal.Operators.DisallowShortTernary"/>
    <rule ref="WordPress.PHP.NoSilencedErrors"/>
    <rule ref="Universal.Operators.DisallowStandalonePostIncrementDecrement"><type>warning</type></rule>
    <rule ref="WordPress.DB.RestrictedFunctions"/>
    <rule ref="WordPress.DB.RestrictedClasses"/>
    <rule ref="WordPress.DB.PreparedSQL"/>
    <rule ref="WordPress.DB.PreparedSQLPlaceholders"/>
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule phpcs-only="true" ref="Universal.Operators.StrictComparisons"><type>warning</type></rule>
    <rule ref="WordPress.PHP.StrictInArray"/>
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>
    <rule ref="WordPress.CodeAnalysis.AssignmentInTernaryCondition"/>

    <rule ref="Generic.PHP.DiscourageGoto">
        <type>error</type>
        <message>The "goto" language construct should not be used.</message>
    </rule>

    <rule ref="Squiz.PHP.Eval.Discouraged">
        <type>error</type>
        <message>eval() is a security risk so not allowed.</message>
    </rule>

    <rule ref="WordPress.PHP.RestrictedPHPFunctions"/>
    <rule ref="WordPress.PHP.POSIXFunctions"/>
    <rule ref="WordPress.PHP.DontExtract"/>
    <rule ref="Generic.PHP.BacktickOperator"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Universal.PHP.LowercasePHPTag"/>
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.SelfMemberReference.NotUsed"><severity>0</severity></rule>
    <rule ref="Generic.VersionControl.GitMergeConflict"/>
    <rule ref="WordPress.WP.I18n"/>
    <rule ref="WordPress.WP.CapitalPDangit"/>
    <rule ref="WordPress.DateTime.RestrictedFunctions"/>
    <rule ref="WordPress.DateTime.CurrentTimeTimestamp"/>
    <rule ref="WordPress.WP.ClassNameCase"/>
    <rule ref="Modernize.FunctionCalls.Dirname"/>



    <!-- ================================================================ -->
    <!-- These rules are being set as warnings instead of errors, so we can error check the entire codebase. -->

    <rule ref="Generic.Files.OneObjectStructurePerFile.MultipleFound">
        <type>warning</type>
        <!-- Exclude the unit tests as no warnings are allowed there. Note: these issues should be fixed and the exclude removed! -->
        <exclude-pattern>/tests/phpunit/*</exclude-pattern>
    </rule>
    <rule ref="WordPress.DB.PreparedSQL.InterpolatedNotPrepared">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.DB.PreparedSQL.NotPrepared">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.Files.FileName.InvalidClassFileName">
        <type>warning</type>
    </rule>
    <rule ref="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase">
        <type>warning</type>
    </rule>

    <rule ref="WordPress.NamingConventions.ValidVariableName">
        <properties>
            <property name="allowed_custom_properties" type="array">
                <!-- From database structure queries. -->
                <element value="Collation"/>
                <element value="Column_name"/>
                <element value="Default"/>
                <element value="Extra"/>
                <element value="Field"/>
                <element value="Index_type"/>
                <element value="Key"/>
                <element value="Key_name"/>
                <element value="Msg_text"/>
                <element value="Non_unique"/>
                <element value="Null"/>
                <element value="Sub_part"/>
                <element value="Type"/>
                <!-- From plugin/theme data. -->
                <element value="authorAndUri"/>
                <element value="Name"/>
                <element value="Version"/>
                <!-- From the result of wp_xmlrpc_server::wp_getPageList(). -->
                <element value="dateCreated"/>

                <!-- From DOMDocument. -->
                <element value="childNodes"/>
                <element value="firstChild"/>
                <element value="formatOutput"/>
                <element value="lastChild"/>
                <element value="nodeName"/>
                <element value="nodeType"/>
                <element value="nodeValue"/>
                <element value="parentNode"/>
                <element value="preserveWhiteSpace"/>
                <element value="textContent"/>
                <!-- From PHPMailer. -->
                <element value="AltBody"/>
                <element value="Body"/>
                <element value="CharSet"/>
                <element value="ContentType"/>
                <element value="Encoding"/>
                <element value="Hostname"/>
                <element value="mailHeader"/>
                <element value="MIMEBody"/>
                <element value="MIMEHeader"/>
                <element value="Sender"/>
                <element value="Subject"/>
                <!-- From PHPUnit_Util_Getopt. -->
                <element value="longOptions"/>
                <!-- From POP3. -->
                <element value="ERROR"/>
                <!-- From ZipArchive. -->
                <element value="numFiles"/>
            </property>
        </properties>
    </rule>

    <rule ref="WordPress.PHP.NoSilencedErrors">
        <properties>
            <property name="customAllowedFunctionsList" type="array">
                <element value="ssh2_connect"/>
                <element value="ssh2_auth_password"/>
                <element value="ssh2_auth_pubkey_file"/>
                <element value="ftp_ssl_connect"/>
                <element value="ftp_connect"/>
                <element value="ftp_get_option"/>
                <element value="ftp_set_option"/>
                <element value="disk_free_space"/>
                <element value="getimagesize"/>
                <element value="iptcparse"/>
                <element value="exif_read_data"/>
                <element value="gzinflate"/>
                <element value="gzuncompress"/>
                <element value="gzdecode"/>
                <element value="imagecreatefromwebp"/>
                <element value="imagecreatefromavif"/>
            </property>
        </properties>
    </rule>


    <!-- Assignments in while conditions are a valid method of looping over iterables. -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition">
        <exclude-pattern>*</exclude-pattern>
    </rule>

    <rule ref="Generic.Functions.FunctionCallArgumentSpacing">
        <exclude-pattern>/wp-config\.php</exclude-pattern>
        <exclude-pattern>/wp-config-sample\.php</exclude-pattern>
        <exclude-pattern>/wp-tests-config\.php</exclude-pattern>
        <exclude-pattern>/wp-tests-config-sample\.php</exclude-pattern>
    </rule>

    <!-- Exclude forbidding goto in the HTML Processor, which mimics algorithms that are written
         this way in the HTML specification, and these particular algorithms are complex and
         highly imperative. Avoiding the goto introduces a number of risks that could make it
         more difficult to maintain the relationship to the standard, lead to subtle differences
         in the parsing, and distance the code from its standard. -->
    <rule ref="Generic.PHP.DiscourageGoto.Found">
        <exclude-pattern>/wp-includes/html-api/class-wp-html-processor\.php</exclude-pattern>
        <exclude-pattern>/wp-includes/html-api/class-wp-html-doctype-info\.php</exclude-pattern>
    </rule>

    <!-- Exclude sample config from modernization to prevent breaking CI workflows based on WP-CLI scaffold.
         See: https://core.trac.wordpress.org/ticket/48082#comment:16 -->
    <rule ref="Modernize.FunctionCalls.Dirname.FileConstant">
        <exclude-pattern>/wp-tests-config-sample\.php</exclude-pattern>
    </rule>

    <rule ref="PEAR.NamingConventions.ValidClassName.Invalid">
        <exclude-pattern>/tests/phpunit/tests/*</exclude-pattern>
        <!-- Exclude some old classes that cannot be renamed, as it would break back compat. -->
        <exclude-pattern>/src/wp-admin/includes/class-wp-filesystem-ftpsockets\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-oembed\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-oembed-controller\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-xmlrpc-server\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-text-diff-renderer-inline\.php</exclude-pattern>
    </rule>

    <!-- Exclude some old classes that cannot be renamed, as it would break back compat. -->
    <rule ref="PEAR.NamingConventions.ValidClassName.StartWithCapital">
        <exclude-pattern>/src/wp-admin/includes/class-wp-list-table-compat\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-dependency\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-editor\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-xmlrpc-server\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wpdb\.php</exclude-pattern>
    </rule>

    <!-- Allow the WP DB Class and related tests for usage of direct database access functions. -->
    <rule ref="WordPress.DB.RestrictedFunctions">
        <exclude-pattern>/src/wp-includes/class-wpdb\.php</exclude-pattern>
        <exclude-pattern>/tests/phpunit/tests/db/charset\.php</exclude-pattern>
    </rule>

    <!-- Allow the WP DB related tests for issues with prepared SQL placeholders
         (as the handling of those are being tested). -->
    <rule ref="WordPress.DB.PreparedSQLPlaceholders.UnfinishedPrepare">
        <exclude-pattern>/tests/phpunit/tests/db\.php</exclude-pattern>
    </rule>
    <rule ref="WordPress.DB.PreparedSQLPlaceholders.UnsupportedPlaceholder">
        <exclude-pattern>/tests/phpunit/tests/db\.php</exclude-pattern>
    </rule>
    <rule ref="WordPress.DB.PreparedSQLPlaceholders.UnescapedLiteral">
        <exclude-pattern>/tests/phpunit/tests/db\.php</exclude-pattern>
    </rule>
    <rule ref="WordPress.DB.PreparedSQL.NotPrepared">
        <exclude-pattern>/tests/phpunit/tests/admin/includesSchema\.php</exclude-pattern>
        <exclude-pattern>/tests/phpunit/tests/multisite/site\.php</exclude-pattern>
    </rule>

    <!-- Exclude the unit tests from the file name rules. -->
    <rule ref="WordPress.Files.FileName">
        <exclude-pattern>/tests/phpunit/*</exclude-pattern>
    </rule>

    <!-- WPCS1620: template.php isn't a template tag file. -->
    <rule ref="WordPress.Files.FileName.InvalidTemplateTagFileName">
        <exclude-pattern>/src/wp-includes/template\.php</exclude-pattern>
    </rule>

    <!-- Exclude some incorrectly named files that won't be renamed. -->
    <rule ref="WordPress.Files.FileName.InvalidClassFileName">
        <exclude-pattern>/src/wp-admin/includes/class-wp-list-table-compat\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-dependency\.php</exclude-pattern>
        <exclude-pattern>/src/wp-includes/class-wp-editor\.php</exclude-pattern>
        <exclude-pattern>/src/wp-content/themes/twentyeleven/inc/widgets\.php</exclude-pattern>
        <exclude-pattern>/src/wp-content/themes/twentyfourteen/inc/widgets\.php</exclude-pattern>
        <exclude-pattern>/src/wp-content/themes/twentyfourteen/inc/featured-content\.php</exclude-pattern>
    </rule>

    <!-- WPCS1621: These files are expected to use _ instead of -. -->
    <rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
        <exclude-pattern>/src/_index\.php</exclude-pattern>
        <exclude-pattern>/src/wp-admin/_index\.php</exclude-pattern>
        <exclude-pattern>/src/wp-content/themes/twentythirteen/taxonomy-post_format\.php</exclude-pattern>
        <exclude-pattern>/src/wp-content/themes/twentyfourteen/taxonomy-post_format\.php</exclude-pattern>
    </rule>

    <!-- Allow the I18n functions file for issues identified by the I18n sniff
         (such as calling the low-level translate() function). -->
    <rule ref="WordPress.WP.I18n">
        <exclude-pattern>/src/wp-includes/l10n\.php</exclude-pattern>
        <exclude-pattern>/tests/phpunit/tests/l10n\.php</exclude-pattern>
        <exclude-pattern>/tests/phpunit/tests/l10n/loadTextdomainJustInTime\.php</exclude-pattern>
    </rule>

    <!-- Translator comments aren't needed in unit tests. -->
    <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
        <exclude-pattern>/tests/*</exclude-pattern>
    </rule>

</ruleset>
